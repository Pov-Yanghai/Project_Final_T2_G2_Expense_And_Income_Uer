## Just sample process of our project u need to change data set and some class need to change to please look place complex change it to easy to understand with easy syntax 
## This system has admin to mange user and user has unique CSV file. Admin can add user and user can add transaction and view report.

import csv
import os
import random
from datetime import datetime, timedelta

class Transaction:
    def __init__(self, amount, date, category, description=None):
        self.amount = amount
        self.date = date
        self.category = category
        self.description = description

    def __str__(self):
        return f"{self.date} - {self.category}: ${self.amount}, {self.description}"
## abstract method 
class Expense(Transaction):
    pass

class Income(Transaction):
    pass
## User class to store user data and transactions
class User:
    def __init__(self, username, password):
        self.username = username
        self.password = password
        self.transactions = []
        self.filename = f"{self.username}_transactions.csv"

    def generate_random_data(self):
        if os.path.exists(f"{self.username}_initial_transactions.csv"):
            try:
                with open(f"{self.username}_initial_transactions.csv", 'r') as file:
                    reader = csv.reader(file)
                    next(reader)  # Skip header row
                    real_transactions = []
                    for row in reader:
                        amount, date, category, description = row
                        amount = float(amount)
                        if amount < 0:
                            real_transactions.append(Expense(abs(amount), date, category, description))
                        else:
                            real_transactions.append(Income(amount, date, category, description))
                    self.transactions = real_transactions
                    return # Data loaded from file
            except FileNotFoundError:
                print(f"File {self.username}_initial_transactions.csv not found.")
            except Exception as e:
                print(f"Error loading initial transactions: {e}")
    ## Gernerate data from chat GPT need to find for real data 
        real_transactions = [
            Expense(50.00, "2024-01-05", "Food", "Lunch at cafe"),
            Income(2000.00, "2024-01-10", "Salary", "Monthly salary"),
            Expense(30.00, "2024-01-12", "Transport", "Bus fare"),
            Expense(100.00, "2024-01-15", "Bills", "Electricity bill"),
            Income(150.00, "2024-01-20", "Freelance", "Project payment"),
            Expense(75.00, "2024-01-25", "Entertainment", "Movie ticket"),
            Expense(25.00, "2024-01-28", "Food", "Groceries"),
            Income(50.00, "2024-02-01", "Gift", "Birthday cash"),
            Expense(60.00, "2024-02-03", "Transport", "Taxi ride"),
            Expense(120.00, "2024-02-08", "Bills", "Internet bill"),
            Income(2100.00, "2024-02-10", "Salary","Monthly Salary"),
            Expense(40.00, "2024-02-15", "Food", "Dinner out"),
            Expense(80.00, "2024-02-22", "Entertainment", "Concert"),
            Income(200.00, "2024-02-25", "Freelance", "Web design project"),
            Expense(35.00, "2024-03-01", "Transport", "Train ticket"),
            Expense(55.00, "2024-03-05", "Food", "Lunch"),
            Income(2200.00, "2024-03-10", "Salary", "Monthly Salary"),
            Expense(90.00, "2024-03-12", "Bills", "Water bill"),
            Expense(70.00, "2024-03-18", "Entertainment", "Bowling"),
            Income(75.00, "2024-03-22", "Gift", "From family"),
            Expense(45.00, "2024-03-28", "Food", "Coffee"),
            Expense(110.00, "2024-04-02", "Bills", "Phone bill"),
            Income(2300.00, "2024-04-10", "Salary", "Monthly Salary"),
            Expense(65.00, "2024-04-15", "Transport", "Ride share"),
            Expense(85.00, "2024-04-20", "Entertainment", "Theater"),
            Income(180.00, "2024-04-25", "Freelance", "Software update"),
            Expense(50.00, "2024-05-01", "Food", "Quick lunch"),
            Expense(100.00, "2024-05-08", "Bills", "Cable bill"),
            Income(2400.00, "2024-05-10", "Salary", "Monthly Salary"),
            Expense(70.00, "2024-05-15", "Transport", "Public transport"),
            Expense(95.00, "2024-05-22", "Entertainment", "Arcade"),
            Income(90.00, "2024-05-28", "Gift", "From friend"),
            Expense(55.00, "2024-06-03", "Food", "Takeout"),
            Income(2500.00, "2024-06-10", "Salary", "Monthly Salary"),
            Expense(120.00, "2024-06-12", "Bills", "Insurance"),
            Expense(80.00, "2024-06-18", "Entertainment", "Mini golf"),
            Income(220.00, "2024-06-25", "Freelance", "App testing"),
            Expense(60.00, "2024-07-02", "Food", "Restaurant"),
            Income(2600.00, "2024-07-10", "Salary", "Monthly Salary"),
            Expense(75.00, "2024-07-15", "Transport", "Train"),
            Expense(100.00, "2024-07-22", "Entertainment", "Escape room"),
            Income(110.00, "2024-07-28", "Gift", "From family"),
            Expense(65.00, "2024-08-03", "Food", "Cafe"),
            Income(2700.00, "2024-08-10", "Salary", "Monthly Salary"),
            Expense(130.00, "2024-08-12", "Bills", "Rent"),
            Expense(85.00, "2024-08-18", "Entertainment", "Go-karting"),
            Income(250.00, "2024-08-25", "Freelance", "Data entry"),
            Expense(70.00, "2024-09-02", "Food", "Dinner"),
            Income(2800.00, "2024-09-10", "Salary", "Monthly Salary"),
            Expense(80.00, "2024-09-15", "Transport", "Bus"),
            Expense(105.00, "2024-09-22", "Entertainment", "Hiking"),
            Income(120.00, "2024-09-28", "Gift", "From friend"),
            Expense(75.00, "2024-10-03", "Food", "Groceries"),
            Income(2900.00, "2024-10-10", "Salary", "Monthly Salary"),
            Expense(140.00, "2024-10-12", "Bills", "Medical bills"),
            Expense(90.00, "2024-10-18", "Entertainment", "Museum"),
            Income(280.00, "2024-10-25", "Freelance", "Consulting"),
            Expense(80.00, "2024-11-02", "Food", "Lunch"),
            Income(3000.00, "2024-11-10", "Salary", "Monthly Salary"),
            Expense(85.00, "2024-11-15", "Transport", "Taxi"),
            Expense(110.00, "2024-11-22", "Entertainment", "Zoo"),
            Income(130.00, "2024-11-28", "Gift", "From family"),
            Expense(85.00, "2024-12-03", "Food", "Dinner"),
            Income(3100.00, "2024-12-10", "Salary", "Monthly Salary"),
            Expense(150.00, "2024-12-12", "Bills", "Holiday expenses"),
            Expense(95.00, "2024-12-18", "Entertainment", "Holiday event"),
            Income(300.00, "2024-12-25", "Freelance", "Year-end bonus"),
            Expense(90.00, "2024-12-28", "Food", "Holiday groceries"),
            Expense(40.00, "2024-12-30", "Transport", "Travel")
        ]
        self.transactions = real_transactions 
    
   

    ## Save transactions to a CSV file  
    def save_transactions(self):
        try:
            with open(self.filename, 'w', newline='') as file:
                writer = csv.writer(file)
                writer.writerow(["Type","Amount", "Date", "Category", "Description"])
                for transaction in self.transactions:
                    transaction_type = "Income" if isinstance(transaction, Income)else "Expense"
                    writer.writerow([transaction_type,transaction.amount, transaction.date, transaction.category, transaction.description])
        except Exception as e:
            print(f"Error saving transactions: {e}")
        
    ## load data from CSV file 
    def load_transactions(self):
        if os.path.exists(self.filename):
            with open(self.filename, 'r') as file:
                reader = csv.reader(file)
                next(reader)
                self.transactions = []
                for row in reader:
                    transaction_type,amount, date, category, description = row
                    amount = float(amount)
                    if transaction_type == "Expense": # Check the type
                        self.transactions.append(Expense(abs(amount), date, category, description))
                    else:
                        self.transactions.append(Income(amount, date, category, description))
                  
## Admin class to  manage transactions  and users information 
class Admin(User):
    def __init__(self, username, password):
        super().__init__(username, password)
## load users from CSV file 
def load_users():
    users = []
    if os.path.exists("users.csv"):
        with open("users.csv", 'r') as file:
            reader = csv.reader(file)
            next(reader)
            for row in reader:
                username, password, is_admin = row
                if is_admin == "True":
                    users.append(Admin(username, password))
                else:
                    users.append(User(username, password))
    return users
## Save user data to CSV file 
def save_users(users):
    with open("users.csv", 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Username", "Password", "IsAdmin"])
        for user in users:
          writer.writerow([user.username, user.password, isinstance(user, Admin)]) 
## Add transaction to for each user 
def add_transaction(user, transaction):
    user.transactions.append(transaction)
    user.save_transactions()
    print("Transaction added successfully!")
## view report for each user  

## Need change please change to to make syste report monthly for each user. Report the transaction every month 
##report check by months
def view_report(user):
    user.load_transactions()
    income = sum(t.amount for t in user.transactions if isinstance(t, Income))
    expenses = sum(t.amount for t in user.transactions if isinstance(t, Expense))
    balance = income - expenses

    print(f"\nTotal Income: ${income}")
    print(f"Total Expenses: ${expenses}")
    print(f"Balance: ${balance}")
## check the balance and give some suggestion to user  
## need more check condition 
    if balance < 0:
        print("\nWarning: You are overspending!")
        print("Here are some suggestions to improve your finances:")
        if expenses > 1.5 * income:
            print("- Your expenses are significantly higher than your income. Consider cutting unnecessary expenses.")
        if any(t.category.lower() == 'entertainment' for t in user.transactions if isinstance(t, Expense)):
            print("- You are spending a lot on entertainment. Try reducing entertainment expenses.")
        if any(t.category.lower() == 'food' for t in user.transactions if isinstance(t, Expense)):
            print("- Food expenses are high. Cooking at home can help reduce costs.")
        print("- Track your daily expenses and prioritize essential spending only.")
    elif balance == 0:
        print("\nWarning: You spent all your income this month. Be careful next month.")
        print("- Track your daily expenses and prioritize essential spending only.")
## view transcription 
def view_transactions(user):
    user.load_transactions()
    print("\nTransaction History:")
    for transaction in user.transactions:
        print(transaction)
## clear transaction history 
def clear_transactions(user):
    user.transactions = []
    user.save_transactions()
    print("Transaction history cleared.")

#ADD more functions you can add more following proposal

def main():
    users = load_users()
    if not users:
        admin = Admin("admin", "admin123")
        admin.generate_random_data()
        users.append(admin)
        save_users(users)

    while True:
        print("\n1. Login")
        print("2. Register")
        print("3. Exit")
        choice = input("Choose option: ")

        if choice == "1":
            username = input("Username: ")
            password = input("Password: ")
            user = next((u for u in users if u.username == username and u.password == password), None)
## Can add more options implement by proposal  
            if user:
                print(f"\nWelcome {user.username}!")
                while True:
                    print("\n1. Add Transaction")
                    print("2. View Report")
                    print("3. View Transactions")
                    print("4. Clear Transactions")
                    print("5. Logout")
                    option = input("Choose option: ")

                    if option == "1":
                        amount = float(input("Amount (+ for income, - for expense): "))
                        date = input("Date (YYYY-MM-DD): ")
                        category = input("Category: ")
                        description = input("Description: ")

                        if amount > 0:
                            transaction = Income(amount, date, category, description)
                        else:
                            transaction = Expense(abs(amount), date, category, description)

                        add_transaction(user, transaction)

                    elif option == "2":
                        view_report(user)   ## need to change to view report by month
                    elif option == "3":
                        view_transactions(user)  # need to change to view transaction by month 
                    elif option == "4":
                        clear_transactions(user)
                    elif option == "5":
                        break
                    else:
                        print("Invalid Option!")
            else:
                print("Invalid Username or Password!")

        elif choice == "2":
            username = input("Enter New Username: ")
            password = input("Enter New Password: ")
            new_user = User(username, password)
            new_user.generate_random_data()
            users.append(new_user)
            save_users(users)
            print("User Registered Successfully!")

        elif choice == "3":
            print("Goodbye!")
            break

        else:
            print("Invalid Choice!")

if __name__ == "__main__":
    main()





## ADD MORE 

## Need add more data according to real data set 

## Need to add more function to make system moreattractivve 
##  view_report(user)   ## need to change to view report by month
## view_transactions(user)  # need to change to view transaction by month